# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
parameters:
  - name: TARGET_ENV
    default: "stage"
    displayName: "Select Target Env For release"
    type: string  
    values:
    - 'stage'
    - 'prod'

variables:
- group: ${{parameters.TARGET_ENV}}

stages:
- stage: 'Build'
  displayName: 'Build App - ${APP_NAME}'

  jobs:
  - job: 'Build'
    displayName: 'Build Job'
  
    pool:
      vmImage: ubuntu-latest

    steps:
    - script: |
        echo selected target : ${{parameters.TARGET_ENV}}
        echo postgres user : $(PGUSERNAME)
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'
    
    - script: |
        npm install
      displayName: 'npm install'

    - task: CopyFiles@2
      inputs:
        Contents: | 
          **/*
          !node_modules/**
          !.git/**
          !.env
        TargetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: 'Deploy'
  displayName: 'Deploy $(APP_NAME)'
  dependsOn: 'Build'
  condition: false
  jobs:
  - deployment: 'DeployTo${{parameters.TARGET_ENV}}'
    displayName: 'Deploy $(APP_NAME) to ${{parameters.TARGET_ENV}} environment'
    environment:
     name: ${{parameters.TARGET_ENV}}
     resourceType: VirtualMachine
     tags: app-${{parameters.TARGET_ENV}}
    strategy:
     rolling:
       maxParallel: 1
       deploy:
         steps:
         - download: current
           artifact: drop
         
         - task: Bash@3
           inputs:
            targetType: 'inline'
            script: 'cd ~ && rm -rf  $(APP_NAME) &&  mkdir $(APP_NAME)'
          
         - task: Bash@3
           inputs:
            targetType: 'inline'
            script: 'cp -a $(Pipeline.Workspace)/drop/. ~/$(APP_NAME)/'
          
         - task: Bash@3
           inputs:
             targetType: 'inline'
             script: |
              cd ~/$(APP_NAME)/
              echo COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) > .env
              echo OKTA_ORG_URL=$(OKTA_ORG_URL) >> .env
              echo OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) >> .env
              echo OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) >> .env
              echo NODE_ENV=$(NODE_ENV) >> .env
              echo PORT=$(PORT) >> .env
              printf "%s%s\n" "HOST=" "$(hostname -I)" >> .env
              echo PGHOST=$(PGHOST) >> .env
              echo PGUSERNAME=$(PGUSERNAME) >> .env
              echo PGDATABASE=$(PGDATABASE) >> .env
              echo PGPASSWORD=$(PGPASSWORD) >> .env
              echo PGPORT=$(PGPORT) >> .env
           
        
         

             


